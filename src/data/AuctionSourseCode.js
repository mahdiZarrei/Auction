export const sourseCode =
  "Ly8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVApwcmFnbWEgc29saWRpdHkgMC44LjI1OwoKaW1wb3J0IHtJRVJDNzIxfSBmcm9tICJAb3BlbnplcHBlbGluL2NvbnRyYWN0cy90b2tlbi9FUkM3MjEvSUVSQzcyMS5zb2wiOwoKLy8vIEB0aXRsZSBBdWN0aW9uIENvbnRyYWN0IGZvciBORlRzCi8vLyBAbm90aWNlIFRoaXMgY29udHJhY3QgYWxsb3dzIHVzZXJzIHRvIGF1Y3Rpb24gdGhlaXIgTkZUcyBpbiBhIGRlY2VudHJhbGl6ZWQgbWFubmVyLgpjb250cmFjdCBBdWN0aW9uIHsKICAgIElFUkM3MjEgcHVibGljIG5mdDsKICAgIHVpbnQyNTYgcHVibGljIHRva2VuSWQ7CgogICAgYWRkcmVzcyBwYXlhYmxlIHB1YmxpYyBzZWxsZXI7CiAgICBib29sIHB1YmxpYyBzZWxsZXJSZWNlaXZlZCA9IGZhbHNlOwoKICAgIGJvb2wgcHVibGljIHN0YXJ0ZWQ7CiAgICB1aW50MjU2IHB1YmxpYyBlbmRBdDsKCiAgICBhZGRyZXNzIHB1YmxpYyBoaWdoZXN0QmlkZGVyOwogICAgdWludDI1NiBwdWJsaWMgaGlnaGVzdEJpZDsKICAgIGJvb2wgcHVibGljIGJ1eWVyUmVjZWl2ZWQgPSBmYWxzZTsKICAgIG1hcHBpbmcoYWRkcmVzcyA9PiB1aW50MjU2KSBwdWJsaWMgYmlkczsKCiAgICAvLy8gQG5vdGljZSBFbWl0dGVkIHdoZW4gdGhlIGF1Y3Rpb24gc3RhcnRzCiAgICBldmVudCBTdGFydCgpOwogICAgLy8vIEBub3RpY2UgRW1pdHRlZCB3aGVuIGEgbmV3IGJpZCBpcyBwbGFjZWQKICAgIC8vLyBAcGFyYW0gc2VuZGVyIFRoZSBhZGRyZXNzIG9mIHRoZSBiaWRkZXIKICAgIC8vLyBAcGFyYW0gYW1vdW50IFRoZSBhbW91bnQgb2YgdGhlIGJpZAogICAgZXZlbnQgQmlkKGFkZHJlc3MgaW5kZXhlZCBzZW5kZXIsIHVpbnQyNTYgYW1vdW50KTsKICAgIC8vLyBAbm90aWNlIEVtaXR0ZWQgd2hlbiBhIGJpZGRlciB3aXRoZHJhd3MgdGhlaXIgYmlkCiAgICAvLy8gQHBhcmFtIGJpZGRlciBUaGUgYWRkcmVzcyBvZiB0aGUgYmlkZGVyCiAgICAvLy8gQHBhcmFtIGFtb3VudCBUaGUgYW1vdW50IHdpdGhkcmF3bgogICAgZXZlbnQgV2l0aGRyYXcoYWRkcmVzcyBpbmRleGVkIGJpZGRlciwgdWludDI1NiBhbW91bnQpOwogICAgLy8vIEBub3RpY2UgRW1pdHRlZCB3aGVuIHRoZSBzZWxsZXIgcmVjZWl2ZXMgdGhlIGF1Y3Rpb24gYW1vdW50CiAgICAvLy8gQHBhcmFtIHNlbGxlciBUaGUgYWRkcmVzcyBvZiB0aGUgc2VsbGVyCiAgICAvLy8gQHBhcmFtIGFtb3VudCBUaGUgYW1vdW50IHJlY2VpdmVkCiAgICBldmVudCBTZWxsZXJSZWNlaXZlZEFtb3VudChhZGRyZXNzIHNlbGxlciwgdWludDI1NiBhbW91bnQpOwogICAgLy8vIEBub3RpY2UgRW1pdHRlZCB3aGVuIHRoZSBidXllciByZWNlaXZlcyB0aGUgTkZUCiAgICAvLy8gQHBhcmFtIGJ1eWVyIFRoZSBhZGRyZXNzIG9mIHRoZSBidXllcgogICAgLy8vIEBwYXJhbSBuZnQgVGhlIGFkZHJlc3Mgb2YgdGhlIE5GVAogICAgZXZlbnQgQnV5ZXJSZWNlaXZlZE5GVChhZGRyZXNzIGJ1eWVyLCBhZGRyZXNzIG5mdCk7CgogICAgLy8vIEBub3RpY2UgVGhyb3duIHdoZW4gdGhlIGF1Y3Rpb24gaGFzIG5vdCBzdGFydGVkIHlldAogICAgZXJyb3IgTm90U3RhcnRlZFlldCgpOwogICAgLy8vIEBub3RpY2UgVGhyb3duIHdoZW4gdGhlIGF1Y3Rpb24gaGFzIG5vdCBlbmRlZCB5ZXQKICAgIGVycm9yIE5vdEVuZGVkWWV0KCk7CiAgICAvLy8gQG5vdGljZSBUaHJvd24gd2hlbiB0aGUgYXVjdGlvbiBoYXMgYWxyZWFkeSBzdGFydGVkCiAgICBlcnJvciBBbHJlYWR5U3RhcnRlZCgpOwogICAgLy8vIEBub3RpY2UgVGhyb3duIHdoZW4gdGhlIGNhbGxlciBpcyBub3QgdGhlIHNlbGxlcgogICAgZXJyb3IgT25seVNlbGxlcigpOwogICAgLy8vIEBub3RpY2UgVGhyb3duIHdoZW4gdGhlIGNhbGxlciBpcyBub3QgdGhlIGhpZ2hlc3QgYmlkZGVyCiAgICBlcnJvciBPbmx5QnV5ZXIoKTsKICAgIC8vLyBAbm90aWNlIFRocm93biB3aGVuIHRoZSBhdWN0aW9uIGhhcyBlbmRlZAogICAgZXJyb3IgQXVjdGlvbkVuZGVkKCk7CgogICAgLy8vIEBub3RpY2UgRW5zdXJlcyB0aGUgYXVjdGlvbiBoYXMgc3RhcnRlZAogICAgbW9kaWZpZXIgaXNTdGFydCgpIHsKICAgICAgICBpZiAoIXN0YXJ0ZWQpIHsKICAgICAgICAgICAgcmV2ZXJ0IE5vdFN0YXJ0ZWRZZXQoKTsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBFbnN1cmVzIHRoZSBjYWxsZXIgaXMgdGhlIHNlbGxlcgogICAgbW9kaWZpZXIgb25seVNlbGxlcigpIHsKICAgICAgICBpZiAobXNnLnNlbmRlciAhPSBzZWxsZXIpIHsKICAgICAgICAgICAgcmV2ZXJ0IE9ubHlTZWxsZXIoKTsKICAgICAgICB9CiAgICAgICAgXzsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBFbnN1cmVzIHRoZSBjYWxsZXIgaXMgdGhlIGhpZ2hlc3QgYmlkZGVyCiAgICBtb2RpZmllciBvbmx5QnV5ZXIoKSB7CiAgICAgICAgaWYgKG1zZy5zZW5kZXIgIT0gaGlnaGVzdEJpZGRlcikgewogICAgICAgICAgICByZXZlcnQgT25seUJ1eWVyKCk7CiAgICAgICAgfQogICAgICAgIF87CiAgICB9CgogICAgLy8vIEBub3RpY2UgRW5zdXJlcyB0aGUgYXVjdGlvbiBoYXMgZW5kZWQKICAgIG1vZGlmaWVyIGlzRW5kZWQoKSB7CiAgICAgICAgaWYgKGJsb2NrLnRpbWVzdGFtcCA8IGVuZEF0KSB7CiAgICAgICAgICAgIHJldmVydCBOb3RFbmRlZFlldCgpOwogICAgICAgIH0KICAgICAgICBfOwogICAgfQoKICAgIC8vLyBAbm90aWNlIEluaXRpYWxpemVzIHRoZSBjb250cmFjdCBieSBzZXR0aW5nIHRoZSBORlQsIHRva2VuIElELCBhbmQgc3RhcnRpbmcgYmlkCiAgICAvLy8gQHBhcmFtIF9uZnQgVGhlIE5GVCB0byBiZSBhdWN0aW9uZWQKICAgIC8vLyBAcGFyYW0gX3Rva2VuSWQgVGhlIHRva2VuIElEIG9mIHRoZSBORlQKICAgIC8vLyBAcGFyYW0gX3N0YXJ0aW5nQmlkIFRoZSBzdGFydGluZyBiaWQgZm9yIHRoZSBhdWN0aW9uCiAgICBjb25zdHJ1Y3RvcigKICAgICAgICBJRVJDNzIxIF9uZnQsCiAgICAgICAgdWludDI1NiBfdG9rZW5JZCwKICAgICAgICB1aW50MjU2IF9zdGFydGluZ0JpZAogICAgKSBwYXlhYmxlIHsKICAgICAgICBuZnQgPSBfbmZ0OwogICAgICAgIHRva2VuSWQgPSBfdG9rZW5JZDsKICAgICAgICBzZWxsZXIgPSBwYXlhYmxlKG1zZy5zZW5kZXIpOwogICAgICAgIGhpZ2hlc3RCaWQgPSBfc3RhcnRpbmdCaWQ7CiAgICAgICAgaGlnaGVzdEJpZGRlciA9IG1zZy5zZW5kZXI7CiAgICB9CgogICAgLy8vIEBub3RpY2UgU3RhcnRzIHRoZSBhdWN0aW9uCiAgICAvLy8gQHBhcmFtIGVuZFRpbWUgVGhlIGR1cmF0aW9uIG9mIHRoZSBhdWN0aW9uIGluIHNlY29uZHMKICAgIGZ1bmN0aW9uIHN0YXJ0KHVpbnQyNTYgZW5kVGltZSkgZXh0ZXJuYWwgb25seVNlbGxlciB7CiAgICAgICAgaWYgKHN0YXJ0ZWQpIHsKICAgICAgICAgICAgcmV2ZXJ0IEFscmVhZHlTdGFydGVkKCk7CiAgICAgICAgfQogICAgICAgIG5mdC50cmFuc2ZlckZyb20obXNnLnNlbmRlciwgYWRkcmVzcyh0aGlzKSwgdG9rZW5JZCk7CiAgICAgICAgc3RhcnRlZCA9IHRydWU7CiAgICAgICAgZW5kQXQgPSBibG9jay50aW1lc3RhbXAgKyBlbmRUaW1lOwoKICAgICAgICBlbWl0IFN0YXJ0KCk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgQWxsb3dzIHVzZXJzIHRvIHBsYWNlIGEgYmlkIG9uIHRoZSBORlQKICAgIGZ1bmN0aW9uIGJpZCgpIGV4dGVybmFsIHBheWFibGUgaXNTdGFydCB7CiAgICAgICAgaWYgKGJsb2NrLnRpbWVzdGFtcCA+IGVuZEF0KSB7CiAgICAgICAgICAgIHJldmVydCBBdWN0aW9uRW5kZWQoKTsKICAgICAgICB9CiAgICAgICAgcmVxdWlyZShiaWRzW21zZy5zZW5kZXJdICsgbXNnLnZhbHVlID4gaGlnaGVzdEJpZCwgInZhbHVlIDwgaGlnaGVzdCIpOwoKICAgICAgICBpZiAoaGlnaGVzdEJpZGRlciAhPSBhZGRyZXNzKDApKSB7CiAgICAgICAgICAgIGJpZHNbaGlnaGVzdEJpZGRlcl0gKz0gaGlnaGVzdEJpZDsKICAgICAgICB9CgogICAgICAgIGhpZ2hlc3RCaWRkZXIgPSBtc2cuc2VuZGVyOwogICAgICAgIGhpZ2hlc3RCaWQgPSBtc2cudmFsdWU7CgogICAgICAgIGVtaXQgQmlkKG1zZy5zZW5kZXIsIG1zZy52YWx1ZSk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgQWxsb3dzIGJpZGRlcnMgdG8gd2l0aGRyYXcgdGhlaXIgYmlkcyBhZnRlciB0aGUgYXVjdGlvbiBlbmRzCiAgICBmdW5jdGlvbiB3aXRoZHJhdygpIGV4dGVybmFsIGlzU3RhcnQgaXNFbmRlZCB7CiAgICAgICAgcmVxdWlyZShiaWRzW21zZy5zZW5kZXJdICE9IDAsICJ5b3UgaGF2ZSBub3Qgb2ZmZXJlZCIpOwoKICAgICAgICB1aW50MjU2IGJhbGFuY2UgPSBiaWRzW21zZy5zZW5kZXJdOwogICAgICAgIGJpZHNbbXNnLnNlbmRlcl0gPSAwOwogICAgICAgIChib29sIHN1Y2Nlc3MsICkgPSBwYXlhYmxlKG1zZy5zZW5kZXIpLmNhbGx7dmFsdWU6IGJhbGFuY2V9KCIiKTsKICAgICAgICBhc3NlcnQoc3VjY2Vzcyk7CgogICAgICAgIGVtaXQgV2l0aGRyYXcobXNnLnNlbmRlciwgYmFsYW5jZSk7CiAgICB9CgogICAgLy8vIEBub3RpY2UgQWxsb3dzIHRoZSBzZWxsZXIgdG8gd2l0aGRyYXcgdGhlIGhpZ2hlc3QgYmlkIGFtb3VudCBhZnRlciB0aGUgYXVjdGlvbiBlbmRzCiAgICBmdW5jdGlvbiB3aXRoZHJhd05GVFByaWNlKCkgZXh0ZXJuYWwgaXNTdGFydCBvbmx5U2VsbGVyIGlzRW5kZWQgewogICAgICAgIHJlcXVpcmUoIXNlbGxlclJlY2VpdmVkLCAieW91IGFscmVhZHkgd2l0aGRyYXduIik7CgogICAgICAgIHNlbGxlclJlY2VpdmVkID0gdHJ1ZTsKICAgICAgICAoYm9vbCBzdWNjZXNzLCApID0gc2VsbGVyLmNhbGx7dmFsdWU6IGhpZ2hlc3RCaWR9KCIiKTsKICAgICAgICBhc3NlcnQoc3VjY2Vzcyk7CgogICAgICAgIGVtaXQgU2VsbGVyUmVjZWl2ZWRBbW91bnQoc2VsbGVyLCBoaWdoZXN0QmlkKTsKICAgIH0KCiAgICAvLy8gQG5vdGljZSBBbGxvd3MgdGhlIGhpZ2hlc3QgYmlkZGVyIHRvIHdpdGhkcmF3IHRoZSBORlQgYWZ0ZXIgdGhlIGF1Y3Rpb24gZW5kcwogICAgZnVuY3Rpb24gd2l0aGRyYXdORlQoKSBwdWJsaWMgaXNTdGFydCBpc0VuZGVkIG9ubHlCdXllciB7CiAgICAgICAgcmVxdWlyZSghYnV5ZXJSZWNlaXZlZCwgInlvdSBhbHJlYWR5IHdpdGhkcmF3biIpOwoKICAgICAgICBidXllclJlY2VpdmVkID0gdHJ1ZTsKICAgICAgICBuZnQuc2FmZVRyYW5zZmVyRnJvbShhZGRyZXNzKHRoaXMpLCBoaWdoZXN0QmlkZGVyLCB0b2tlbklkKTsKCiAgICAgICAgZW1pdCBCdXllclJlY2VpdmVkTkZUKGhpZ2hlc3RCaWRkZXIsIGFkZHJlc3MobmZ0KSk7CiAgICB9Cn0KCg==";
