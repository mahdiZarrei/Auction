export const sourseCode =
  "Ly8gU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IE1JVApwcmFnbWEgc29saWRpdHkgXjAuOC4yNSAuMDsKCmltcG9ydCB7SUVSQzIwfSBmcm9tICJAb3BlbnplcHBlbGluL2NvbnRyYWN0cy90b2tlbi9FUkMyMC9JRVJDMjAuc29sIjsKaW1wb3J0IHtPd25hYmxlfSBmcm9tICJAb3BlbnplcHBlbGluL2NvbnRyYWN0cy9hY2Nlc3MvT3duYWJsZS5zb2wiOwoKY29udHJhY3QgSUNPIGlzIE93bmFibGUgewogICAgZXJyb3Igbm90Q29ycmVjdFZhbHVlKHVpbnQyNTYgdmFsdWUsIHVpbnQyNTYgcHJpY2UpOwoKICAgIElFUkMyMCBwdWJsaWMgaW1tdXRhYmxlIHRva2VuOwogICAgdWludDI1NiBwdWJsaWMgaW1tdXRhYmxlIHRva2VuUmF0ZTsKCiAgICB1aW50MjU2IHB1YmxpYyBpbW11dGFibGUgbWF4QWlyZHJvcEFtb3VudDsKICAgIHVpbnQyNTYgcHVibGljIGltbXV0YWJsZSBob2xkZXJBaXJkcm9wQW1vdW50OwogICAgdWludDI1NiBwdWJsaWMgdG90YWxBaXJkcm9wczsKCiAgICB1aW50MjU2IHB1YmxpYyBpY29FbmRUaW1lOwoKICAgIGVudW0gU3RhZ2UgewogICAgICAgIGRpc2FibGUsCiAgICAgICAgYWlyZHJvcCwKICAgICAgICBzYWxlCiAgICB9CiAgICBTdGFnZSBwdWJsaWMgc3RhZ2U7CgogICAgdWludDI1NiBwdWJsaWMgaG9sZGVyc0NvdW50OwoKICAgIHN0cnVjdCBpbnZlbnRvcnkgewogICAgICAgIGJvb2wgYWlyZHJvcFdpdGhkcmF3bjsKICAgICAgICB1aW50MjU2IGhvbGRlcnM7CiAgICAgICAgYm9vbCBpc0hvbGRlcjsKICAgIH0KICAgIG1hcHBpbmcoYWRkcmVzcyA9PiBpbnZlbnRvcnkpIHByaXZhdGUgdXNlckludmVudG9yeTsKCiAgICBldmVudCBCdXkoYWRkcmVzcyBpbmRleGVkIGJ1eWVyLCB1aW50MjU2IGluZGV4ZWQgYW1vdW50KTsKICAgIGV2ZW50IEFpcmRyb3AoYWRkcmVzcyBpbmRleGVkIHJlY2VpdmVyLCB1aW50MjU2IGluZGV4ZWQgYW1vdW50KTsKCiAgICBjb25zdHJ1Y3RvcigKICAgICAgICBhZGRyZXNzIF90b2tlbiwKICAgICAgICB1aW50MjU2IF9tYXhBaXJkcm9wQW1vdW50LAogICAgICAgIHVpbnQyNTYgX2hvbGRlckFpcmRyb3BBbW91bnQsCiAgICAgICAgdWludDI1NiBfdG9rZW5SYXRlCiAgICApIHBheWFibGUgT3duYWJsZShtc2cuc2VuZGVyKSB7CiAgICAgICAgdG9rZW4gPSBJRVJDMjAoX3Rva2VuKTsKICAgICAgICBtYXhBaXJkcm9wQW1vdW50ID0gX21heEFpcmRyb3BBbW91bnQ7CiAgICAgICAgaG9sZGVyQWlyZHJvcEFtb3VudCA9IF9ob2xkZXJBaXJkcm9wQW1vdW50OwogICAgICAgIHRva2VuUmF0ZSA9IF90b2tlblJhdGU7CiAgICB9CgogICAgbW9kaWZpZXIgaXNBY3RpdmUoKSB7CiAgICAgICAgcmVxdWlyZSgKICAgICAgICAgICAgaWNvRW5kVGltZSA+IDAgJiYgYmxvY2sudGltZXN0YW1wIDwgaWNvRW5kVGltZSwKICAgICAgICAgICAgIklDTyBoYXZlIGJlZW4gZW5kZWQhIgogICAgICAgICk7CiAgICAgICAgXzsKICAgIH0KCiAgICBtb2RpZmllciBpc0luQWN0aXZlKCkgewogICAgICAgIHJlcXVpcmUoaWNvRW5kVGltZSA9PSAwLCAiSUNPIGFscmVyYWR5IGFjdGl2YXRlZCEiKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGlzQWlyZHJvcCgpIHsKICAgICAgICByZXF1aXJlKHN0YWdlID09IFN0YWdlLmFpcmRyb3AsICJBaXJkcm9wIGlzbid0IGFjdGl2ZSEiKTsKICAgICAgICBfOwogICAgfQoKICAgIG1vZGlmaWVyIGlzU2FsZSgpIHsKICAgICAgICByZXF1aXJlKHN0YWdlID09IFN0YWdlLnNhbGUsICJJQ08gU2FsZSBpc24ndCBhY3RpdmUhIik7CiAgICAgICAgXzsKICAgIH0KCiAgICBmdW5jdGlvbiBhY3RpdmUodWludDI1NiBkdXJhdGlvbiwgdWludDggX3N0YWdlKQogICAgICAgIGV4dGVybmFsCiAgICAgICAgb25seU93bmVyCiAgICAgICAgaXNJbkFjdGl2ZQogICAgewogICAgICAgIHJlcXVpcmUoZHVyYXRpb24gIT0gMCwgImR1cmF0aW9uIG11c3QgYmUgPiAwLiIpOwogICAgICAgIGljb0VuZFRpbWUgPSBibG9jay50aW1lc3RhbXAgKyBkdXJhdGlvbjsKICAgICAgICBzdGFnZSA9IFN0YWdlKF9zdGFnZSk7CiAgICB9CgogICAgZnVuY3Rpb24gZGVBY3RpdmUoKSBleHRlcm5hbCBvbmx5T3duZXIgaXNBY3RpdmUgewogICAgICAgIGljb0VuZFRpbWUgPSAwOwogICAgICAgIHN0YWdlID0gU3RhZ2UuZGlzYWJsZTsKICAgIH0KCiAgICBmdW5jdGlvbiBhaXJkcm9wKCkgZXh0ZXJuYWwgaXNBY3RpdmUgaXNBaXJkcm9wIHsKICAgICAgICBpbnZlbnRvcnkgbWVtb3J5IFVzZXJJbnZlbnRvcnkgPSB1c2VySW52ZW50b3J5W21zZy5zZW5kZXJdOwogICAgICAgIHJlcXVpcmUoIVVzZXJJbnZlbnRvcnkuYWlyZHJvcFdpdGhkcmF3biwgIllvdSByZWNlaXZlZCB5b3VyIGFpcmRyb3AuIik7CiAgICAgICAgcmVxdWlyZSgKICAgICAgICAgICAgdG90YWxBaXJkcm9wcyArIGhvbGRlckFpcmRyb3BBbW91bnQgPD0gbWF4QWlyZHJvcEFtb3VudCwKICAgICAgICAgICAgIkFsbCBBaXJkcm9wcyB3ZXJlIHJlbGVhc2VkISIKICAgICAgICApOwoKICAgICAgICByZXF1aXJlKAogICAgICAgICAgICBiYWxhbmNlT2ZUb2tlbnMoYWRkcmVzcyh0aGlzKSkgPj0gaG9sZGVyQWlyZHJvcEFtb3VudCwKICAgICAgICAgICAgIk5vIGVub3VnaCB0b2tlbnMgZm9yIGFpcmRyb3AhIgogICAgICAgICk7CgogICAgICAgIFVzZXJJbnZlbnRvcnkuYWlyZHJvcFdpdGhkcmF3biA9IHRydWU7CgogICAgICAgIHRvdGFsQWlyZHJvcHMgPSB0b3RhbEFpcmRyb3BzICsgaG9sZGVyQWlyZHJvcEFtb3VudDsKCiAgICAgICAgaWYgKCFVc2VySW52ZW50b3J5LmlzSG9sZGVyKSB7CiAgICAgICAgICAgIFVzZXJJbnZlbnRvcnkuaXNIb2xkZXIgPSB0cnVlOwogICAgICAgICAgICBob2xkZXJzQ291bnQrKzsKICAgICAgICB9CgogICAgICAgIFVzZXJJbnZlbnRvcnkuaG9sZGVycyA9IFVzZXJJbnZlbnRvcnkuaG9sZGVycyArIGhvbGRlckFpcmRyb3BBbW91bnQ7CgogICAgICAgIHVzZXJJbnZlbnRvcnlbbXNnLnNlbmRlcl0gPSBVc2VySW52ZW50b3J5OwoKICAgICAgICB0b2tlbi50cmFuc2Zlcihtc2cuc2VuZGVyLCBob2xkZXJBaXJkcm9wQW1vdW50KTsKCiAgICAgICAgZW1pdCBBaXJkcm9wKG1zZy5zZW5kZXIsIGhvbGRlckFpcmRyb3BBbW91bnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIHB1cmNoYXNlKHVpbnQyNTYgYW1vdW50KSBleHRlcm5hbCBwYXlhYmxlIGlzQWN0aXZlIGlzU2FsZSB7CiAgICAgICAgdWludDI1NiBwcmljZSA9IGFtb3VudCAqIHRva2VuUmF0ZTsKICAgICAgICBpZiAobXNnLnZhbHVlICE9IGFtb3VudCAqIHByaWNlKSB7CiAgICAgICAgICAgIHJldmVydCBub3RDb3JyZWN0VmFsdWUobXNnLnZhbHVlLCBhbW91bnQgKiBwcmljZSk7CiAgICAgICAgfQoKICAgICAgICBpZiAoIXVzZXJJbnZlbnRvcnlbbXNnLnNlbmRlcl0uaXNIb2xkZXIpIHsKICAgICAgICAgICAgdXNlckludmVudG9yeVttc2cuc2VuZGVyXS5pc0hvbGRlciA9IHRydWU7CiAgICAgICAgICAgIGhvbGRlcnNDb3VudCsrOwogICAgICAgIH0KCiAgICAgICAgdXNlckludmVudG9yeVttc2cuc2VuZGVyXS5ob2xkZXJzID0KICAgICAgICAgICAgdXNlckludmVudG9yeVttc2cuc2VuZGVyXS5ob2xkZXJzICsKICAgICAgICAgICAgYW1vdW50OwoKICAgICAgICB0b2tlbi50cmFuc2Zlcihtc2cuc2VuZGVyLCBhbW91bnQpOwoKICAgICAgICBlbWl0IEJ1eShtc2cuc2VuZGVyLCBhbW91bnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGRlcG9zaXRUb2tlbnModWludDI1NiBhbW91bnQpIGV4dGVybmFsIG9ubHlPd25lciBpc0luQWN0aXZlIHsKICAgICAgICB0b2tlbi50cmFuc2ZlckZyb20ob3duZXIoKSwgYWRkcmVzcyh0aGlzKSwgYW1vdW50KTsKICAgIH0KCiAgICBmdW5jdGlvbiB3aXRoZHJhd1Rva2Vucyh1aW50MjU2IGFtb3VudCkgZXh0ZXJuYWwgb25seU93bmVyIGlzSW5BY3RpdmUgewogICAgICAgIHJlcXVpcmUoYW1vdW50IDw9IGJhbGFuY2VPZlRva2VucyhhZGRyZXNzKHRoaXMpKSwgImFtb3VudCA+IGJhbGFuY2UuIik7CgogICAgICAgIHRva2VuLnRyYW5zZmVyKG93bmVyKCksIGFtb3VudCk7CiAgICB9CgogICAgZnVuY3Rpb24gd2l0aGRyYXdFdGgodWludDI1NiBhbW91bnQpIGV4dGVybmFsIG9ubHlPd25lciBpc0luQWN0aXZlIHsKICAgICAgICByZXF1aXJlKGFtb3VudCA8PSBiYWxhbmNlT2ZFdGgoYWRkcmVzcyh0aGlzKSksICJhbW91bnQgPiBiYWxhbmNlLiIpOwoKICAgICAgICAoYm9vbCBzdWNjZXNzLCApID0gcGF5YWJsZShvd25lcigpKS5jYWxse3ZhbHVlOiBhbW91bnR9KCIiKTsKICAgICAgICByZXF1aXJlKHN1Y2Nlc3MsICJUcmFuc21pc3Npb24gcHJvYmxlbSIpOwogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZlRva2VucyhhZGRyZXNzIGFjY291bnQpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gdG9rZW4uYmFsYW5jZU9mKGFjY291bnQpOwogICAgfQoKICAgIGZ1bmN0aW9uIGJhbGFuY2VPZkV0aChhZGRyZXNzIGFjY291bnQpIHB1YmxpYyB2aWV3IHJldHVybnMgKHVpbnQyNTYpIHsKICAgICAgICByZXR1cm4gYWNjb3VudC5iYWxhbmNlOwogICAgfQp9Cg==";
